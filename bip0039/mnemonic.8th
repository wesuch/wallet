\	该函数设置密语语种
\	n --
\	n为语言编码，0为英语，1为日语，2为西班牙文，3为中文简体，4为中文繁体，5为法文
0 var, m_lang	\	缺省为英语
: mnemonic_lang
	m_lang ! ;

\	获取密语字典数组
\	-- a
\	a为密语字典数组
: mnemonic_wordlist
	[ "english.txt", "japanese.txt", "spanish.txt", "chinese_simplified.txt", "chinese_traditional.txt", "french.txt" ]
	m_lang @ a:@ f:open-ro nip
	[] swap
	( rot swap a:push swap ) f:eachline 
	f:close ;

\	该函数返回元素在数组中的位置
\	http://8th-dev.com/forum/index.php/topic,717.0.html
: a:index-of \ a item cmp -- a ix
	>r swap
	\ prepare for 'no such item':
	null -rot
	(
		\ test the current item against our search item:
		2 pick r@ w:exec
		\ it matches, so get rid of the 'null' result, and break the loop:
		if
			swap rot
			break
		then
			\ in any case, drop the remaining item
			drop
	) a:each
	\ clean up:
	rdrop nip swap ;

\	set the numberic base to 2
\	--
: binary 
	2 base drop ;


\	该函数随机生成一个12个单词/字的密语数组
\	参考: BIP 0039
\	调用规格： -- a

: mnemonic_generate
	\       随机生成两个64位的随机数
	binary ( rand >s ) 2 times decimal

	\       将之拼接为128位字符串，前置空位补0
	"%064s%064s" s:strfmt

	\	计算验证码（SHA256哈希值头四位），添加到末尾，构成132位字符串
	dup
	cr:SHA256 cr:hash cr:hash>s
	hex
	>n
	binary
	>s
	decimal
	0 4 s:slice
	s:+
	
	\	将其按11位长平均分割，共计有132/11=12部分
	( 11 s:/ a:open ) 11 times
	12 a:close
	
	\	将每部分转换为一个0-2047的值
	binary
	( >n ) a:map
	decimal
	
	\	对应为密语单词
	mnemonic_wordlist >r
	( r@ swap a:@ nip ) a:map
	\ clean up:
	rdrop ;

\	该函数检查密语数组的正确性
\	参考: BIP 0039
\	调用规格：  a -- t
\	a为密语数组，t为true或者false
: mnemonic_check
	\	将数组元素对应为索引位
	mnemonic_wordlist >r
	( r@ swap ' s:= a:index-of nip ) a:map
	rdrop
	
	\	将每部分转换为一个11位长的二进制字符串
	binary
	( >s "%011s" s:strfmt ) a:map
	decimal

	\	组合为一个132位长的二进制字符串
	"" a:join

	\	截取128位长度，剩余四位为验证码
	128 s:/ a:open swap

	\	计算其SHA256哈希值
	cr:SHA256 cr:hash cr:hash>s
	hex
	>n
	binary
	>s
	decimal

	\	取哈希值的前四位
	0 4 s:slice

	\	与验证码进行比较
	s:= ;


\	该函数由密语字符串生成种子字符串
\	参考：BIP 0039
\	调用格式：	a s -- s
\	mnemonic为密语数组
\	s为加密字，由用户调用时指定
\	s为32字节长的种子数据
: mnemonic_seed
	swap " " a:join swap
	cr:SHA256
	cr:hmac
	cr:hash>s ;

: mnemonic_test
	3 mnemonic_lang
	mnemonic_generate
	dup
	mnemonic_check
	if "wesuch" mnemonic_seed then ;
