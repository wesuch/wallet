\	该函数根据一个128位的随机数，生成相应的密语数组
\	参考: BIP 0039
\	调用规格：  -- a
\	a为所生成的密语数组

	"chinese_simplified.txt" app:asset
: 	mnemonic_generate
	\	生成两个64位的随机数
	2 base drop
	( rand >s ) 2 times
	1010 base drop
	
	\	将之拼接为128位字符串，前置空位补0
	"%064s%064s" s:strfmt
	\	并其SHA256哈希值头四位，添加到末尾，构成132位字符串
	dup
	cr:SHA256 cr:hash cr:hash>s
	16 base drop
	>n
	2 base drop
	>s
	1010 base drop
	0 4 s:slice
	s:+
	
	\	将其按11位长平均分割，共计有132/11=12部分
	( 11 s:/ a:open ) 11 times
	12 a:close
	
	\	将每部分转换为一个0-2047的值
	2 base drop 
	( >n ) a:map
	1010 base drop
	
	\	对应为密语单词
	[]
	"chinese_simplified.txt" f:open-ro ( rot swap a:push swap ) f:eachline f:close
	>r
	( r@ swap a:@ nip ) a:map
	\ clean up:
	rdrop ;

"mnemonic.8th" f:include
\	该函数检查密语数组的正确性
\	参考: BIP 0039
\	调用规格：  a -- t
\	a为密语数组，t为结果true或者false
: mnemonic_check
	\	对应为索引位
	dup a:len 12 n:= not dup if;
	2drop
	0 >r
	( 
		"chinese_simplified.txt" f:open-ro 
		( .s rot s:= if drop r@ swap break else r> 1 n:+ >r then ; ) f:eachline 
		f:close
	) a:map
	\ clean up
	rdrop ;
